// @flow
import { ORDER, ORDER_ITEM, BATCH, CONTAINER, SHIPMENT } from 'modules/relationMapV2/constants';
import type { LINE_CONNECTOR } from '../RelationLine';

export type Entity =
  | typeof ORDER
  | typeof BATCH
  | typeof ORDER_ITEM
  | typeof CONTAINER
  | typeof SHIPMENT;

export type CellRender = {
  // eslint-disable-next-line flowtype/space-after-type-colon
  type:
    | typeof ORDER
    | typeof ORDER_ITEM
    | typeof BATCH
    | typeof CONTAINER
    | typeof SHIPMENT
    | 'duplicateOrder'
    | 'duplicateOrderItem'
    | 'shipmentWithoutContainer'
    | 'itemSummary'
    | 'batchSummary'
    | 'containerSummary'
    | 'shipmentSummary'
    | 'placeholder',
  data?: mixed,
  entity?: Entity,
  beforeConnector?: ?LINE_CONNECTOR,
  afterConnector?: ?LINE_CONNECTOR,
  isLoadedData?: boolean,
};

export type State = {|
  order: Object,
  targets: Array<string>,
  isDragging: boolean,
  moveEntity: {
    isOpen: boolean,
    isProcessing: boolean,
    detail: {
      from: {
        id: string,
        icon: string,
        value: string,
      },
      to: {
        id: string,
        icon: string,
        value: string,
      },
    },
  },
  itemActions: {
    isOpen: boolean,
    isProcessing: boolean,
    detail: {
      entity: {
        id: string,
        no: string,
      },
    },
    type?: 'createBatch' | 'deleteItem',
  },
  batchActions: {
    isOpen: boolean,
    isProcessing: boolean,
    detail: {
      entity: {
        id: string,
        no: string,
      },
      from: {
        id: string,
        type: string,
      },
    },
    type?: 'createBatch' | 'deleteBatch',
  },
  moveActions: {
    isOpen: boolean,
    isProcessing: boolean,
    type?: | 'existOrder'
      | 'newOrder'
      | 'existContainer'
      | 'newContainer'
      | 'existShipment'
      | 'newShipment',
  },
  createItem: {
    isOpen: boolean,
    isProcessing: boolean,
    detail: {
      entity: {
        id: string,
      },
    },
  },
  clone: {
    source: string,
    isOpen: boolean,
    isProcessing: boolean,
  },
  tags: {
    source: string,
    isOpen: boolean,
    isProcessing: boolean,
  },
  edit: {
    type: string,
    selectedId: string,
    orderId?: string,
    orderIds?: Array<string>,
  },
  newOrders: Array<string>,
|};
