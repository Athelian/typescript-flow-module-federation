# source: https://graphql-staging.zenport.io/graphql
# timestamp: Wed Sep 05 2018 19:26:25 GMT+0900 (JST)

type Batch implements Model & Owned & Package & Tagged {
  archived: Boolean!
  orderItem: OrderItem!
  shipment: Shipment
  no: String!
  quantity: Float!
  packageQuantity: Float
  producedAt: DateTime
  deliveredAt: DateTime
  expiredAt: DateTime
  memo: String
  batchAssignments: [BatchAssignment!]!
  batchAdjustments: [BatchAdjustment!]!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  createdBy: User
  updatedBy: User
  deletedBy: User
  ownedBy: Group!
  packageName: String
  packageGrossWeight: MetricValue
  packageVolume: MetricValue
  packageSize: Size
  packageCapacity: Float
  tags: [Tag!]!
}

type BatchAdjustment implements Model & Owned & Sortable {
  batch: Batch!
  reason: BatchAdjustmentReason!
  quantity: Float!
  memo: String
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  createdBy: User
  updatedBy: User
  deletedBy: User
  ownedBy: Group!
  sort: Int!
}

input BatchAdjustmentCreateInput {
  reason: BatchAdjustmentReason!
  quantity: Float!
  memo: String
}

enum BatchAdjustmentReason {
  Inspection
  Lost
  Other
}

input BatchAdjustmentUpdateInput {
  id: ID
  reason: BatchAdjustmentReason
  quantity: Float
  memo: String
}

type BatchAssignment implements Model & Owned & Sortable {
  batch: Batch!
  user: User!
  quantity: Float!
  memo: String
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  createdBy: User
  updatedBy: User
  deletedBy: User
  ownedBy: Group!
  sort: Int!
}

input BatchAssignmentCreateInput {
  userId: ID!
  quantity: Float!
  memo: String
}

input BatchAssignmentUpdateInput {
  id: ID
  userId: ID
  quantity: Float
  memo: String
}

input BatchCreateInput {
  no: String!
  quantity: Float!
  shipmentId: ID
  producedAt: DateTime
  deliveredAt: DateTime
  expiredAt: DateTime
  packageQuantity: Float
  packageName: String
  packageGrossWeight: MetricValueInput
  packageVolume: MetricValueInput
  packageSize: SizeInput
  packageCapacity: Float
  memo: String
  tagIds: [ID!]
  orderItemId: ID!
  batchAssignments: [BatchAssignmentCreateInput!]
  batchAdjustments: [BatchAdjustmentCreateInput!]
}

type BatchMutated {
  batch: Batch
  violations: [Violation!]
}

type BatchPagination {
  nodes: [Batch!]!
  page: Int!
  perPage: Int!
  totalPage: Int!
  count: Int!
  totalCount: Int!
}

input BatchUpdateInput {
  archived: Boolean
  no: String
  quantity: Float
  shipmentId: ID
  producedAt: DateTime
  deliveredAt: DateTime
  expiredAt: DateTime
  packageQuantity: Float
  packageName: String
  packageGrossWeight: MetricValueInput
  packageVolume: MetricValueInput
  packageSize: SizeInput
  packageCapacity: Float
  memo: String
  tagIds: [ID!]
  orderItemId: ID
  batchAssignments: [BatchAssignmentUpdateInput!]
  batchAdjustments: [BatchAdjustmentUpdateInput!]
}

type ContainerGroup implements Model & Owned & Sortable {
  customClearance: TimelineDate!
  warehouseArrival: TimelineDate!
  deliveryReady: TimelineDate!
  shipment: Shipment!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  createdBy: User
  updatedBy: User
  deletedBy: User
  ownedBy: Group!
  sort: Int!
}

input CredentialsInput {
  email: String!
  password: String!
}

enum Currency {
  """AED"""
  AED

  """AFN"""
  AFN

  """ALL"""
  ALL

  """AMD"""
  AMD

  """ANG"""
  ANG

  """AOA"""
  AOA

  """ARS"""
  ARS

  """AUD"""
  AUD

  """AWG"""
  AWG

  """AZN"""
  AZN

  """BAM"""
  BAM

  """BBD"""
  BBD

  """BDT"""
  BDT

  """BGN"""
  BGN

  """BHD"""
  BHD

  """BIF"""
  BIF

  """BMD"""
  BMD

  """BND"""
  BND

  """BOB"""
  BOB

  """BRL"""
  BRL

  """BSD"""
  BSD

  """BTN"""
  BTN

  """BWP"""
  BWP

  """BYN"""
  BYN

  """BZD"""
  BZD

  """CAD"""
  CAD

  """CDF"""
  CDF

  """CHF"""
  CHF

  """CLP"""
  CLP

  """CNY"""
  CNY

  """COP"""
  COP

  """CRC"""
  CRC

  """CUP"""
  CUP

  """CVE"""
  CVE

  """CZK"""
  CZK

  """DJF"""
  DJF

  """DKK"""
  DKK

  """DOP"""
  DOP

  """DZD"""
  DZD

  """EGP"""
  EGP

  """ERN"""
  ERN

  """ETB"""
  ETB

  """EUR"""
  EUR

  """FJD"""
  FJD

  """FKP"""
  FKP

  """GBP"""
  GBP

  """GEL"""
  GEL

  """GHS"""
  GHS

  """GIP"""
  GIP

  """GMD"""
  GMD

  """GNF"""
  GNF

  """GTQ"""
  GTQ

  """GYD"""
  GYD

  """HKD"""
  HKD

  """HNL"""
  HNL

  """HRK"""
  HRK

  """HTG"""
  HTG

  """HUF"""
  HUF

  """IDR"""
  IDR

  """ILS"""
  ILS

  """INR"""
  INR

  """IQD"""
  IQD

  """IRR"""
  IRR

  """ISK"""
  ISK

  """JMD"""
  JMD

  """JOD"""
  JOD

  """JPY"""
  JPY

  """KES"""
  KES

  """KGS"""
  KGS

  """KHR"""
  KHR

  """KMF"""
  KMF

  """KPW"""
  KPW

  """KRW"""
  KRW

  """KWD"""
  KWD

  """KYD"""
  KYD

  """KZT"""
  KZT

  """LAK"""
  LAK

  """LBP"""
  LBP

  """LKR"""
  LKR

  """LRD"""
  LRD

  """LSL"""
  LSL

  """LYD"""
  LYD

  """MAD"""
  MAD

  """MDL"""
  MDL

  """MGA"""
  MGA

  """MKD"""
  MKD

  """MMK"""
  MMK

  """MNT"""
  MNT

  """MOP"""
  MOP

  """MRO"""
  MRO

  """MUR"""
  MUR

  """MVR"""
  MVR

  """MWK"""
  MWK

  """MXN"""
  MXN

  """MYR"""
  MYR

  """MZN"""
  MZN

  """NAD"""
  NAD

  """NGN"""
  NGN

  """NIO"""
  NIO

  """NOK"""
  NOK

  """NPR"""
  NPR

  """NZD"""
  NZD

  """OMR"""
  OMR

  """PAB"""
  PAB

  """PEN"""
  PEN

  """PGK"""
  PGK

  """PHP"""
  PHP

  """PKR"""
  PKR

  """PLN"""
  PLN

  """PYG"""
  PYG

  """QAR"""
  QAR

  """RON"""
  RON

  """RSD"""
  RSD

  """RUB"""
  RUB

  """RUR"""
  RUR

  """RWF"""
  RWF

  """SAR"""
  SAR

  """SBD"""
  SBD

  """SCR"""
  SCR

  """SDG"""
  SDG

  """SEK"""
  SEK

  """SGD"""
  SGD

  """SHP"""
  SHP

  """SLL"""
  SLL

  """SOS"""
  SOS

  """SRD"""
  SRD

  """SSP"""
  SSP

  """STD"""
  STD

  """SVC"""
  SVC

  """SYP"""
  SYP

  """SZL"""
  SZL

  """THB"""
  THB

  """TJS"""
  TJS

  """TMT"""
  TMT

  """TND"""
  TND

  """TOP"""
  TOP

  """TRY"""
  TRY

  """TTD"""
  TTD

  """TWD"""
  TWD

  """TZS"""
  TZS

  """UAH"""
  UAH

  """UGX"""
  UGX

  """USD"""
  USD

  """UYU"""
  UYU

  """UZS"""
  UZS

  """VEF"""
  VEF

  """VND"""
  VND

  """VUV"""
  VUV

  """WST"""
  WST

  """XAF"""
  XAF

  """XAG"""
  XAG

  """XAU"""
  XAU

  """XBA"""
  XBA

  """XBB"""
  XBB

  """XBC"""
  XBC

  """XBD"""
  XBD

  """XCD"""
  XCD

  """XDR"""
  XDR

  """XFU"""
  XFU

  """XOF"""
  XOF

  """XPD"""
  XPD

  """XPF"""
  XPF

  """XPT"""
  XPT

  """XSU"""
  XSU

  """XTS"""
  XTS

  """XUA"""
  XUA

  """XXX"""
  XXX

  """YER"""
  YER

  """ZAR"""
  ZAR

  """ZMW"""
  ZMW

  """ZWL"""
  ZWL
}

scalar DateTime

type Group implements Model {
  types: [GroupType!]!
  name: String!
  name2: String
  tel: String
  address: String
  zipCode: String
  country: String
  disabled: Boolean!
  dummy: Boolean!
  partners(page: Int! = 1, perPage: Int! = 10, filterBy: PartnerFilterInput, sortBy: PartnerSortInput): PartnerPagination!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  createdBy: User
  updatedBy: User
  deletedBy: User
}

enum GroupType {
  Exporter
  Importer
  Forwarder
  Supplier
  Warehouse
}

enum Incoterm {
  FAS
  FOB
  CFR
  CIF
  EXW
  FCA
  CPT
  CIP
  DAT
  DAP
  DDP
}

enum LoadType {
  FCL
  LCL
}

type MetricValue {
  value: Float!
  metric: String!
}

input MetricValueInput {
  value: Float!
  metric: String!
}

interface Model {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  createdBy: User
  updatedBy: User
  deletedBy: User
}

type Mutation {
  login(input: CredentialsInput!): TokenMutated!
  logout: Boolean!
  productCreate(input: ProductCreateInput!): ProductMutated!
  productUpdate(id: ID!, input: ProductUpdateInput!): ProductMutated!
  orderCreate(input: OrderCreateInput!): OrderMutated!
  orderUpdate(id: ID!, input: OrderUpdateInput!): OrderMutated!
  batchCreate(input: BatchCreateInput!): BatchMutated!
  batchUpdate(id: ID!, input: BatchUpdateInput!): BatchMutated!
  tagCreate(input: TagCreateInput!): TagMutated!
  tagUpdate(id: ID!, input: TagUpdateInput!): TagMutated!
}

type Order implements Model & Owned & Tagged {
  archived: Boolean!
  exporter: Group!
  poNo: String!
  currency: Currency!
  issuedAt: DateTime
  piNo: String
  incoterm: Incoterm
  deliveryPlace: String
  memo: String
  orderItems: [OrderItem!]!
  shipments: [Shipment!]!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  createdBy: User
  updatedBy: User
  deletedBy: User
  ownedBy: Group!
  tags: [Tag!]!
}

input OrderCreateInput {
  exporterId: ID!
  poNo: String!
  issuedAt: DateTime
  piNo: String
  currency: Currency!
  incoterm: Incoterm
  deliveryPlace: String
  memo: String
  tagIds: [ID!]
  orderItems: [OrderItemCreateInput!]
}

type OrderItem implements Model & Owned & Sortable {
  order: Order!
  productProvider: ProductProvider!
  price: Price!
  quantity: Float!
  batches: [Batch!]!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  createdBy: User
  updatedBy: User
  deletedBy: User
  ownedBy: Group!
  sort: Int!
}

input OrderItemBatchAdjustmentCreateInput {
  reason: BatchAdjustmentReason!
  quantity: Float!
  memo: String
}

input OrderItemBatchAdjustmentUpdateInput {
  id: ID
  reason: BatchAdjustmentReason
  quantity: Float
  memo: String
}

input OrderItemBatchAssignmentCreateInput {
  userId: ID!
  quantity: Float!
  memo: String
}

input OrderItemBatchAssignmentUpdateInput {
  id: ID
  userId: ID
  quantity: Float
  memo: String
}

input OrderItemBatchCreateInput {
  no: String!
  quantity: Float!
  shipmentId: ID
  producedAt: DateTime
  deliveredAt: DateTime
  expiredAt: DateTime
  packageQuantity: Float
  packageName: String
  packageGrossWeight: MetricValueInput
  packageVolume: MetricValueInput
  packageSize: SizeInput
  packageCapacity: Float
  memo: String
  tagIds: [ID!]
  batchAssignments: [OrderItemBatchAssignmentCreateInput!]
  batchAdjustments: [OrderItemBatchAdjustmentCreateInput!]
}

input OrderItemBatchUpdateInput {
  archived: Boolean
  no: String
  quantity: Float
  shipmentId: ID
  producedAt: DateTime
  deliveredAt: DateTime
  expiredAt: DateTime
  packageQuantity: Float
  packageName: String
  packageGrossWeight: MetricValueInput
  packageVolume: MetricValueInput
  packageSize: SizeInput
  packageCapacity: Float
  memo: String
  tagIds: [ID!]
  id: ID
  batchAssignments: [OrderItemBatchAssignmentUpdateInput!]
  batchAdjustments: [OrderItemBatchAdjustmentUpdateInput!]
}

input OrderItemCreateInput {
  productProviderId: ID!
  price: PriceInput!
  quantity: Float!
  batches: [OrderItemBatchCreateInput!]
}

input OrderItemUpdateInput {
  id: ID
  productProviderId: ID
  price: PriceInput
  quantity: Float
  batches: [OrderItemBatchUpdateInput!]
}

type OrderMutated {
  order: Order
  violations: [Violation!]
}

type OrderPagination {
  nodes: [Order!]!
  page: Int!
  perPage: Int!
  totalPage: Int!
  count: Int!
  totalCount: Int!
}

input OrderUpdateInput {
  archived: Boolean
  exporterId: ID
  poNo: String
  issuedAt: DateTime
  piNo: String
  currency: Currency
  incoterm: Incoterm
  deliveryPlace: String
  memo: String
  tagIds: [ID!]
  orderItems: [OrderItemUpdateInput!]
}

interface Owned {
  ownedBy: Group!
}

interface Package {
  packageName: String
  packageGrossWeight: MetricValue
  packageVolume: MetricValue
  packageSize: Size
  packageCapacity: Float
}

type Partner implements Model {
  group: Group!
  types: [GroupType!]!
  name: String
  code: String
  confirmed: Boolean!
  approvedAt: DateTime
  approvedByPartnerAt: DateTime
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  createdBy: User
  updatedBy: User
  deletedBy: User
}

input PartnerFilterInput {
  query: String
  types: [GroupType!]
  confirmed: Boolean
}

type PartnerPagination {
  nodes: [Partner!]!
  page: Int!
  perPage: Int!
  totalPage: Int!
  count: Int!
  totalCount: Int!
}

input PartnerSortInput {
  createdAt: SortOrder
  updatedAt: SortOrder
}

type Price {
  amount: Float!
  currency: Currency!
}

input PriceInput {
  amount: Float!
  currency: Currency!
}

type Product implements Model & Owned & Tagged {
  archived: Boolean!
  name: String!
  serial: String!
  hsCode: String
  janCode: String
  material: String
  productProviders: [ProductProvider!]!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  createdBy: User
  updatedBy: User
  deletedBy: User
  ownedBy: Group!
  tags: [Tag!]!
}

input ProductCreateInput {
  name: String!
  serial: String!
  janCode: String
  hsCode: String
  material: String
  tagIds: [ID!]
  productProviders: [ProductProviderCreateInput!]!
}

type ProductMutated {
  product: Product
  violations: [Violation!]
}

type ProductPagination {
  nodes: [Product!]!
  page: Int!
  perPage: Int!
  totalPage: Int!
  count: Int!
  totalCount: Int!
}

type ProductProvider implements Model & Owned & Sortable & Package {
  product: Product!
  exporter: Group!
  supplier: Group
  unitType: String
  unitVolume: MetricValue
  unitWeight: MetricValue
  unitPrice: Price
  inspectionFee: Price
  origin: String
  productionLeadTime: Float
  memo: String
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  createdBy: User
  updatedBy: User
  deletedBy: User
  ownedBy: Group!
  sort: Int!
  packageName: String
  packageGrossWeight: MetricValue
  packageVolume: MetricValue
  packageSize: Size
  packageCapacity: Float
}

input ProductProviderCreateInput {
  exporterId: ID!
  supplierId: ID
  unitType: String
  unitVolume: MetricValueInput
  unitWeight: MetricValueInput
  unitPrice: PriceInput
  inspectionFee: PriceInput
  packageName: String
  packageGrossWeight: MetricValueInput
  packageVolume: MetricValueInput
  packageSize: SizeInput
  packageCapacity: Float
}

input ProductProviderFilterInput {
  query: String
  exporterId: String
  supplierId: String
  tagIds: [ID!]
}

type ProductProviderPagination {
  nodes: [ProductProvider!]!
  page: Int!
  perPage: Int!
  totalPage: Int!
  count: Int!
  totalCount: Int!
}

input ProductProviderSortInput {
  createdAt: SortOrder
  updatedAt: SortOrder
  name: SortOrder
  serial: SortOrder
}

input ProductProviderUpdateInput {
  id: ID
  exporterId: ID
  supplierId: ID
  unitType: String
  unitVolume: MetricValueInput
  unitWeight: MetricValueInput
  unitPrice: PriceInput
  inspectionFee: PriceInput
  packageName: String
  packageGrossWeight: MetricValueInput
  packageVolume: MetricValueInput
  packageSize: SizeInput
  packageCapacity: Float
}

input ProductUpdateInput {
  archived: Boolean
  name: String
  serial: String
  janCode: String
  hsCode: String
  material: String
  tagIds: [ID!]
  productProviders: [ProductProviderUpdateInput!]
}

type Query {
  viewer: Viewer!
  authenticated: Boolean!
  product(id: ID!): Product
  products(page: Int! = 1, perPage: Int! = 10): ProductPagination!
  productProvider(id: ID!): ProductProvider
  productProviders(page: Int! = 1, perPage: Int! = 10, filterBy: ProductProviderFilterInput, sortBy: ProductProviderSortInput): ProductProviderPagination!
  order(id: ID!): Order
  orders(page: Int! = 1, perPage: Int! = 10): OrderPagination!
  batch(id: ID!): Batch
  batches(page: Int! = 1, perPage: Int! = 10): BatchPagination!
  shipment(id: ID!): Shipment
  shipments(page: Int! = 1, perPage: Int! = 10): ShipmentPagination!
  tag(id: ID!): Tag
  tags(page: Int! = 1, perPage: Int! = 10, filterBy: TagFilterInput): TagPagination!
}

type Shipment implements Model & Owned & Tagged {
  archived: Boolean!
  no: String!
  blNo: String
  blDate: DateTime
  bookingNo: String
  bookingDate: DateTime
  invoiceNo: String
  incoterm: Incoterm
  loadType: LoadType
  transportType: TransportType
  carrier: String
  cargoReady: TimelineDate!
  voyages: [Voyage!]!
  containerGroups: [ContainerGroup!]!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  createdBy: User
  updatedBy: User
  deletedBy: User
  ownedBy: Group!
  tags: [Tag!]!
}

type ShipmentPagination {
  nodes: [Shipment!]!
  page: Int!
  perPage: Int!
  totalPage: Int!
  count: Int!
  totalCount: Int!
}

type Size {
  length: MetricValue!
  width: MetricValue!
  height: MetricValue!
}

input SizeInput {
  length: MetricValueInput!
  width: MetricValueInput!
  height: MetricValueInput!
}

interface Sortable {
  sort: Int!
}

enum SortOrder {
  ASCENDING
  DESCENDING
}

type Tag implements Model & Owned {
  name: String!
  description: String
  color: String
  entityTypes: [TagEntityType!]!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  createdBy: User
  updatedBy: User
  deletedBy: User
  ownedBy: Group!
}

input TagCreateInput {
  name: ID!
  description: String
  color: String!
  entityTypes: [TagEntityType!]!
}

enum TagEntityType {
  Product
  Order
  Batch
  Shipment
  User
}

input TagFilterInput {
  entityTypes: [TagEntityType!]
}

interface Tagged {
  tags: [Tag!]!
}

type TagMutated {
  tag: Tag
  violations: [Violation!]
}

type TagPagination {
  nodes: [Tag!]!
  page: Int!
  perPage: Int!
  totalPage: Int!
  count: Int!
  totalCount: Int!
}

input TagUpdateInput {
  name: ID
  description: String
  color: String
  entityTypes: [TagEntityType!]
}

type TimelineDate implements Model & Owned {
  date: DateTime
  assignedTo: [User!]!
  approvedBy: User
  approvedAt: DateTime
  timelineDateRevisions: [TimelineDateRevision!]!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  createdBy: User
  updatedBy: User
  deletedBy: User
  ownedBy: Group!
}

type TimelineDateRevision implements Model & Owned & Sortable {
  date: DateTime!
  type: TimelineDateRevisionType!
  memo: String
  timelineDate: TimelineDate!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  createdBy: User
  updatedBy: User
  deletedBy: User
  ownedBy: Group!
  sort: Int!
}

enum TimelineDateRevisionType {
  Delay
  Ahead
  Other
}

type Token {
  token: String!
}

type TokenMutated {
  token: Token
  violations: [Violation!]
}

enum TransportType {
  Sea
  Air
}

type User implements Model & Tagged {
  email: String!
  group: Group
  role: String!
  disabled: Boolean!
  firstName: String!
  lastName: String!
  firstName2: String
  lastName2: String
  avatar: String
  language: String!
  timezone: String!
  memo: String
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  createdBy: User
  updatedBy: User
  deletedBy: User
  tags: [Tag!]!
}

type Viewer {
  user: User!
}

type Violation {
  message: String!
  error: String!
  code: String!
  path: String!
  parameters: [ViolationParameter!]!
}

type ViolationParameter {
  key: String!
  value: String!
}

type Voyage implements Model & Owned & Sortable {
  vesselName: String
  vesselCode: String
  departurePort: String
  arrivalPort: String
  departure: TimelineDate!
  arrival: TimelineDate!
  shipment: Shipment!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  createdBy: User
  updatedBy: User
  deletedBy: User
  ownedBy: Group!
  sort: Int!
}
